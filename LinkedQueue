class LinkedQueue:
    # singly linked list with a Queue
    # First in, First out

    class _Node:
        __slots__ = '_element' , '_next'

        def __init__(self, element, next):
            self._element = element
            self._next = next

    def __init__(self):
        self._head = None
        self._tail = None
        self._size = 0 
    
    def __len__(self):
        return self._size
    
    def is_empty(self):
        return self._size == 0
    
    def first(self):
        if self.is_empty():
            raise Exception('Queue is empty')
        return self._head._element
    
    def dequeue(self):
        # remove and return the first element of the list
        if self.is_empty():
            raise Exception('Queue is empty')
        answer = self._head._element
        self._head = self._head._next
        self._size -= 1
        if self.is_empty():
            self._tail = None
        return answer
    
    def enqueue(self, e):
        # add an element to the back of the list
        newest = self._Node(e, None)
        if self.is_empty():
            self._head = newest
        else:
            self._tail._next = newest
        self._tail = newest
        self._size += 1

l = LinkedQueue()
# create a Queue
l.enqueue(1)
l.enqueue(8)
l.enqueue(7)
l.enqueue(4)
# add element to the list
print(len(l))
a = l.dequeue()
print(a)
# remove them and print them one at a time
a = l.dequeue()
print(a)
a = l.dequeue()
print(a)
a = l.dequeue()
print(a)
