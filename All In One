class _DoublyLinkedBase:
    class Node:
        __slots__ = '_element', '_prev','_next'
        
    def __init__(self):
        self._header = self._Node(None, None, None)
        self._trailer = self._Node(None, None, None)
        self._header._next = self._trailer
        self._trailer._prev = self._header
        self._size = 0
    
    def __len__(self):
        return self._size
    
    def is_empty(self):
        return self._size == 0
    
    def _insert_between(self, e, predecessor, successor):
        newest = self._Node(e, predecessor, successor) # linked to neighbors
        predecessor._next = newest
        successor._prev = newest
        self._size += 1
        return newest
    
    def delete_node(self, node):
        predecessor = node._prev
        successor = node._next
        predecessor._next = successor
        successor._prev = predecessor
        self._size -= 1
        element = node._element
        node._prev = node._next = node._element = None
    
    def insertion_sort(L):
        if len(L) > 1:
            marker = L.first()
            while marker != L.last():
                pivot = L.after(marker)
                value = pivot.element( )
                if value > marker.element( ):
                    marker = pivot
                else:
                    walk = marker
                    while walk != L.first() and L.before(walk).element() > value:
                        walk = L.before(walk)
                    L.delete(pivot)
                    L.add_before(walk,value)

class PositionalList(_DoublyLinkedBase):
    
    class Position:
        def __init__(self, container, node):
            self._container = container
            self._node = node
        
        def element(self):
            return self._node._element
        
        def __eq__(self, other):
            return type(other) is type(self) and other._node is self._node
        
        def __ne__(self, other):
            return not(self == other)
    
    def validate(self, p):
        if not isinstance(p, self.Position):
            raise TypeError(' p must be proper Position type ')
        if p._container is not self:
            raise ValueError(' p does not belong to this container ')
        if p._node._next is None:
            raise ValueError(' p is no longer valid ')
        return p._node
    
    def make_position(self, node):
        if node is self._header or node is self._trailer:
            return None 
        else:
            return self.Position(self, node)
    
    def first(self):
        return self._make_position(self. header. next)
    
    def last(self):
        return self._make_position(self. trailer. prev)
        
    def before(self, p):
        node = self._validate(p)
        return self._make_position(node. prev)
    
    def after(self, p):
        node = self._validate(p)
        return self._make_position(node. next)
    
    def __iter__(self):
        cursor = self.first()
        while cursor is not None:
            yield cursor.element()
            cursor = self.after(cursor)
    
    def insert_between(self, e, predecessor, successor):
        node = super()._insert_between(e, predecessor, successor)
        return self._make_position(node)
    
    def add_first(self, e):
        return self._insert_between(e, self._header, self._header._next)
    
    def add_last(self, e):
        return self._insert_between(e, self._trailer._prev, self._trailer)
        
    def add_before(self, p, e):
        original = self._validate(p)
        return self._insert_between(e, original. prev, original)
    
    def add_after(self, p, e):
        original = self._validate(p)
        return self._insert_between(e, original, original._next)
    
    def delete(self, p):
        original = self. validate(p)
        return self._delete_node(original)
    
    def replace(self, p, e):
        original = self. validate(p)
        old_value = original._element
        original._element = e
        return old_value

class FavoriteList:
    class _Item_:
        __slots__ = '_value','_count'
        def __init__(self, e):
            self._value = 0
            self._count = 0

        def _find_position(self, e):
            walk = self._data.first()
            while walk is not None and walk.element( )._value != e:
                walk = self._data.after(walk)
            return walk
        
        def _move_up(self, p):
            if p != self._data.first( ):
                cnt = p.element( )._count
                walk = self. data.before(p)
                if cnt > walk.element( )._count:
                    while (walk != self._data.first( ) and cnt > self._data.before(walk).element( )._count):
                        walk = self. data.before(walk)
                self. data.add_before(walk, self._data.delete(p))
        
        def _init_(self):
            self. data = PositionalList()
        
        def __len__(self):
            return len(self._data)
        
        def is_empty(self):
            return len(self._data) == 0
        
        def access(self, e):
            p = self._find_position(e)
            if p is None:
                p = self._data.add_last(self._Item(e))
            p.element().count += 1
            self._move_up(p)

        def remove(self, e):
            p = self._find_position(e)
            if p is not None:
                self. data.delete(p)
        
        def top(self, k):
            if not 1 <= k <= len(self):
                raise ValueError(' Illegal value for k ')
            walk = self._data.first()
            for j in range(k):
                item = walk.element()
                yield item._value
                walk = self.data.after(walk)
