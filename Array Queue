 class ArrayQueue:
2 ”””FIFO queue implementation using a Python list as underlying storage.”””
3 DEFAULT CAPACITY = 10 # moderate capacity for all new queues
4
5 def init (self):
6 ”””Create an empty queue.”””
7 self. data = [None] ArrayQueue.DEFAULT CAPACITY
8 self. size = 0
9 self. front = 0
10
11 def len (self):
12 ”””Return the number of elements in the queue.”””
13 return self. size
14
15 def is empty(self):
16 ”””Return True if the queue is empty.”””
17 return self. size == 0
18
19 def first(self):
20 ”””Return (but do not remove) the element at the front of the queue.
21
22 Raise Empty exception if the queue is empty.
23 ”””
24 if self.is empty( ):
25 raise Empty( Queue is empty )
26 return self. data[self. front]
27
28 def dequeue(self):
29 ”””Remove and return the first element of the queue (i.e., FIFO).
30
31 Raise Empty exception if the queue is empty.
32 ”””
33 if self.is empty( ):
34 raise Empty( Queue is empty )
35 answer = self. data[self. front]
36 self. data[self. front] = None # help garbage collection
37 self. front = (self. front + 1) % len(self. data)
38 self. size −= 1
39 return answer
Code Fragment 6.6: Array-based implementation of a queue (continued in Code
Fragment 6.7).
244 Chapter 6. Stacks, Queues, and Deques
40 def enqueue(self, e):
41 ”””Add an element to the back of queue.”””
42 if self. size == len(self. data):
43 self. resize(2 len(self.data)) # double the array size
44 avail = (self. front + self. size) % len(self. data)
45 self. data[avail] = e
46 self. size += 1
47
48 def resize(self, cap): # we assume cap >= len(self)
49 ”””Resize to a new list of capacity >= len(self).”””
50 old = self. data # keep track of existing list
51 self. data = [None] cap # allocate list with new capacity
52 walk = self. front
53 for k in range(self. size): # only consider existing elements
54 self. data[k] = old[walk] # intentionally shift indices
55 walk = (1 + walk) % len(old) # use old size as modulus
56 self. front = 0
